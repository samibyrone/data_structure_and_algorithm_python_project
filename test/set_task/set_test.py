import unittest

from DSA.set_task.set import Set

class TestSet(unittest.TestCase):

    def test_that_set_is_not_empty(self):
        my_set = Set()
        self.assertEqual(0, my_set.size())
        self.assertTrue(my_set.isEmpty())

    def test_that_set_can_add_elements_to_the_set_list(self):
        my_set = Set()
        my_set.add("Samibyrone")
        my_set.add("Semicolon")
        my_set.add("Europe")
        self.assertEqual(3, my_set.size())
        self.assertFalse(my_set.isEmpty())

    def test_that_set_can_remove_element_from_set_list(self):
        my_set = Set()
        my_set.add("Samibyrone")
        my_set.add("Semicolon")
        my_set.add("Europe")
        my_set.add(580000)
        my_set.add("Expendable")
        self.assertEqual(5, my_set.size())
        my_set.remove("Europe")
        self.assertEqual(4, my_set.size())
        self.assertFalse(my_set.isEmpty())

    def test_that_set_contains_element_from_set_list(self):
        my_set = Set()
        my_set.add("Samibyrone")
        my_set.add("Semicolon")
        my_set.add("Europe")
        my_set.add(580000)
        my_set.add("Expendable")
        self.assertTrue(my_set.contains("Europe"))
        self.assertTrue(my_set.contains("Samibyrone"))
        self.assertFalse(my_set.contains("Data-Structure-and-Algorithm"))
        self.assertEqual(5, my_set.size())
        self.assertFalse(my_set.isEmpty())

    def test_that_set_can_clear_all_element_from_set_list(self):
        my_set = Set()
        my_set.add("Samibyrone")
        my_set.add("Semicolon")
        my_set.add("Europe")
        my_set.add(580000)
        my_set.add("Expendable")
        self.assertEqual(5, my_set.size())
        my_set.clear()
        self.assertEqual(0, my_set.size())
        self.assertTrue(my_set.isEmpty())

    def test_that_set_can_clear_all_elements_from_set_and_add_to_the_list(self):
        my_set = Set()
        my_set.add("Samibyrone")
        my_set.add("Semicolon")
        my_set.add("Europe")
        my_set.add(580000)
        my_set.add("Expendable")
        self.assertEqual(5, my_set.size())
        my_set.clear()
        self.assertEqual(0, my_set.size())
        self.assertTrue(my_set.isEmpty())
        my_set.add("Encyclopedia")
        my_set.add("It's_a_Beautiful_day_to_be_Happy")
        self.assertEqual(2, my_set.size())
        self.assertFalse(my_set.isEmpty())

    def test_that_set_can_clear_all_elements_from_set_and_add_to_list_using_union_to_return_new_set(self):
        my_set = Set()
        my_set.add("Samibyrone")
        my_set.add("Semicolon")
        my_set.add("Europe")
        my_set.add(580000)
        my_set.add("Expendable")
        self.assertEqual(5, my_set.size())
        my_set.clear()
        self.assertEqual(0, my_set.size())
        self.assertTrue(my_set.isEmpty())
        my_set.add("Encyclopedia")
        my_set.add("It's_a_Beautiful_day_to_be_Happy")
        my_set2 = Set()
        my_set2.add("Samibyrone")
        my_set2.add("Encyclopedia")
        my_union = my_set.union(my_set2)
        self.assertEqual(3, my_union.size())
        self.assertFalse(my_union.isEmpty())

    def test_that_set_can_clear_all_elements_from_set_and_return_new_set_using_intersection(self):
        my_set = Set()
        my_set.add("Samibyrone")
        my_set.add("Semicolon")
        my_set.add("Europe")
        my_set.add(580000)
        my_set.add("Expendable")
        self.assertEqual(5, my_set.size())
        my_set.clear()
        self.assertEqual(0, my_set.size())
        self.assertTrue(my_set.isEmpty())
        my_set.add("Encyclopedia")
        my_set.add("It's_a_Beautiful_day_to_be_Happy")
        my_set.add("It's_a_Happy_Day")
        my_set2 = Set()
        my_set2.add("Samibyrone")
        my_set2.add("Encyclopedia")
        my_intersection = my_set.intersection(my_set2)
        self.assertEqual(2, my_intersection.size())
        self.assertFalse(my_intersection.isEmpty())

    def test_that_set_can_clear_all_elements_from_set_and_return_new_set_using_difference(self):
        my_set = Set()
        my_set.add("Samibyrone")
        my_set.add("Semicolon")
        my_set.add("Europe")
        my_set.add(580000)
        my_set.add("Expendable")
        self.assertEqual(5, my_set.size())
        my_set.clear()
        self.assertEqual(0, my_set.size())
        self.assertTrue(my_set.isEmpty())
        my_set.add("Encyclopedia")
        my_set.add("It's_a_Beautiful_day_to_be_Happy")
        my_set2 = Set()
        my_set2.add("Samibyrone")
        my_set2.add("Encyclopedia")
        my_difference = my_set.difference(my_set2)
        self.assertEqual(1, my_difference.size())
        self.assertFalse(my_difference.isEmpty())



